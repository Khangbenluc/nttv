import streamlit as st
import pandas as pd
from datetime import datetime
import pytz
import logging

# ============================
# LOGGING C·∫§U H√åNH
# ============================
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ============================
# D·ªÆ LI·ªÜU M·∫™U
# ============================
diary_entries = [
    {"date": "2025-09-01", "time": "08:30", "activity": "ƒê·∫øn Nha Trang"},
    {"date": "2025-09-01", "time": "15:00", "activity": "T·∫Øm bi·ªÉn"},
    {"date": "2025-09-02", "time": "09:00", "activity": "Tham quan H√≤n Mun"},
]

trip_meta = {
    "location": "Nha Trang",
    "days": 5,
    "people": 4,
    "theme": "Ngh·ªâ d∆∞·ª°ng v√† kh√°m ph√°"
}

itinerary = [
    {"day": 1, "morning": "ƒê·∫øn Nha Trang, nh·∫≠n ph√≤ng kh√°ch s·∫°n", "afternoon": "-", "evening": "D·∫°o bi·ªÉn, ƒÉn t·ªëi"},
    {"day": 2, "morning": "H√≤n Mun - l·∫∑n bi·ªÉn", "afternoon": "VinWonders", "evening": "-"},
]

hotels = [
    {"name": "Sunrise Nha Trang", "checkin": "2025-09-01", "checkout": "2025-09-05", "phone": "0123456789", "notes": "G·∫ßn bi·ªÉn"}
]

trains = {
    "depart": {"train_no": "SE8", "depart_time": "2025-09-01 06:00", "arrive_time": "2025-09-01 14:00"},
    "return": {"train_no": "SE7", "depart_time": "2025-09-05 20:00", "arrive_time": "2025-09-06 04:00"}
}

# ============================
# TIMEZONE
# ============================
VN_TZ = pytz.timezone("Asia/Ho_Chi_Minh")

# ============================
# POPUP TH√îNG B√ÅO
# ============================
def show_popup_notice():
    """Hi·ªÉn th·ªã popup th√¥ng b√°o n·ªïi ·ªü ch√≠nh gi·ªØa m√†n h√¨nh."""
    if "show_notice" not in st.session_state:
        st.session_state.show_notice = True

    if st.session_state.show_notice:
        popup_html = """
        <style>
        #popup {
          position: fixed; top: 50%; left: 50%;
          transform: translate(-50%, -50%);
          background: white; padding: 30px; border-radius: 12px;
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
          z-index: 9999; max-width: 400px; text-align: center;
        }
        .close-btn {
          margin-top: 20px; padding: 10px 20px;
          background: #f00; color: white; border: none;
          border-radius: 6px; cursor: pointer;
        }
        </style>

        <div id="popup">
          <h3 style="color:red;">‚ö†Ô∏è Th√¥ng b√°o</h3>
          <p>Trang web ƒëang trong qu√° tr√¨nh ho√†n thi·ªán.<br>D·ªØ li·ªáu hi·ªán t·∫°i ch·ªâ l√† th·ª≠ nghi·ªám.</p>
          <button class="close-btn" onclick="document.getElementById('popup').style.display='none'">
            ƒê√≥ng
          </button>
        </div>
        """
        st.components.v1.html(popup_html, height=300, width=None)
        logger.info("Hi·ªÉn th·ªã popup c·∫£nh b√°o.")

# ============================
# H√ÄM HI·ªÇN TH·ªä NH·∫¨T K√ù
# ============================
def show_diary():
    st.header("üìî Nh·∫≠t k√Ω du l·ªãch")
    df_diary = pd.DataFrame(diary_entries)

    if df_diary.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu nh·∫≠t k√Ω.")
        logger.warning("Kh√¥ng c√≥ d·ªØ li·ªáu nh·∫≠t k√Ω ƒë·ªÉ hi·ªÉn th·ªã.")
    else:
        search_term = st.text_input("T√¨m ki·∫øm ho·∫°t ƒë·ªông ho·∫∑c ƒë·ªãa ƒëi·ªÉm trong nh·∫≠t k√Ω:")
        logger.info(f"T√¨m ki·∫øm nh·∫≠t k√Ω v·ªõi t·ª´ kh√≥a: {search_term}")

        if search_term:
            filtered = df_diary[df_diary["activity"].str.contains(search_term, case=False, na=False)]
        else:
            filtered = df_diary

        if filtered.empty:
            st.warning("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.")
            logger.warning("K·∫øt qu·∫£ t√¨m ki·∫øm r·ªóng.")
        else:
            df_show = filtered.copy()
            df_show.index = range(1, len(df_show) + 1)
            df_show.index.name = "STT"
            st.dataframe(df_show.rename(columns={"date": "Ng√†y", "time": "Th·ªùi gian", "activity": "Ho·∫°t ƒë·ªông/ƒê·ªãa ƒëi·ªÉm"}))

            idx = st.number_input("Ch·ªçn s·ªë th·ª© t·ª± h√†ng (STT):", min_value=1, max_value=len(df_show), step=1)
            row = df_show.iloc[idx - 1]
            st.success(f"üìÖ {row['date']} ‚è∞ {row['time']} ‚Üí {row['activity']}")
            logger.info(f"Hi·ªÉn th·ªã chi ti·∫øt nh·∫≠t k√Ω STT {idx}: {row.to_dict()}")

# ============================
# H√ÄM HI·ªÇN TH·ªä TH√îNG TIN CHUNG
# ============================
def show_meta():
    st.header("‚ÑπÔ∏è Th√¥ng tin chung chuy·∫øn ƒëi")

    # ƒê·ªãa ƒëi·ªÉm
    st.markdown(f"<h2 style='color:#2E86C1;'>{trip_meta['location']}</h2>", unsafe_allow_html=True)

    # S·ªë ng√†y
    st.write(f"üìÖ **S·ªë ng√†y:** {trip_meta['days']}")

    # S·ªë ng∆∞·ªùi (d√πng metric ƒë·ªÉ gi·ªëng ch·ªâ s·ªë)
    st.metric(label="üë• S·ªë ng∆∞·ªùi ƒëi", value=trip_meta['people'])

    # Ch·ªß ƒë·ªÅ
    st.markdown(f"<i style='color:#27AE60;'>Ch·ªß ƒë·ªÅ: {trip_meta['theme']}</i>", unsafe_allow_html=True)

# ============================
# H√ÄM HI·ªÇN TH·ªä L·ªäCH TR√åNH
# ============================
def show_itinerary():
    st.header("üìÖ L·ªãch tr√¨nh chi ti·∫øt")
    df_itin = pd.DataFrame(itinerary)

    if df_itin.empty:
        st.info("Ch∆∞a c√≥ l·ªãch tr√¨nh.")
        logger.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch tr√¨nh.")
    else:
        day_options = ["T·∫•t c·∫£"] + [f"Ng√†y {d}" for d in df_itin['day'].unique()]
        day_select = st.selectbox("Ch·ªçn ng√†y:", day_options)
        logger.info(f"Ng∆∞·ªùi d√πng ch·ªçn {day_select} trong l·ªãch tr√¨nh.")

        if day_select != "T·∫•t c·∫£":
            day_num = int(day_select.split()[1])
            df_show = df_itin[df_itin["day"] == day_num]
        else:
            df_show = df_itin

        for _, r in df_show.sort_values("day").iterrows():
            with st.expander(f"Ng√†y {int(r['day'])}"):
                st.write("S√°ng:", r.get("morning", ""))
                st.write("Chi·ªÅu:", r.get("afternoon", ""))
                st.write("T·ªëi:", r.get("evening", ""))
                logger.info(f"Hi·ªÉn th·ªã l·ªãch tr√¨nh ng√†y {r['day']}")

# ============================
# H√ÄM HI·ªÇN TH·ªä KH√ÅCH S·∫†N
# ============================
def show_hotels():
    st.header("üè® Th√¥ng tin kh√°ch s·∫°n")
    df_hotels = pd.DataFrame(hotels)

    if df_hotels.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu kh√°ch s·∫°n.")
        logger.warning("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch s·∫°n.")
    else:
        df_h = df_hotels.copy()
        df_h.index = range(1, len(df_h) + 1)
        df_h.index.name = "STT"
        st.dataframe(df_h.rename(columns={"name": "T√™n kh√°ch s·∫°n", "checkin": "Check-in", "checkout": "Check-out", "phone": "SƒêT li√™n h·ªá", "notes": "Ghi ch√∫"}))
        logger.info("Hi·ªÉn th·ªã danh s√°ch kh√°ch s·∫°n.")

# ============================
# H√ÄM HI·ªÇN TH·ªä T√ÄU H·ªéA
# ============================
def show_trains():
    st.header("üöÜ Th√¥ng tin t√†u h·ªèa")
    df_trains = pd.DataFrame([trains["depart"], trains["return"]], index=["Chuy·∫øn ƒëi", "Chuy·∫øn v·ªÅ"])
    st.dataframe(df_trains.rename(columns={"train_no": "S·ªë hi·ªáu t√†u", "depart_time": "Th·ªùi gian kh·ªüi h√†nh", "arrive_time": "Th·ªùi gian ƒë·∫øn"}))
    logger.info("Hi·ªÉn th·ªã th√¥ng tin t√†u h·ªèa.")

# ============================
# APP CH√çNH
# ============================
def main():
    st.set_page_config(page_title="Tra c·ª©u Nh·∫≠t k√Ω & K·∫ø ho·∫°ch Nha Trang", layout="wide")
    st.title("üìí Tra c·ª©u Nh·∫≠t k√Ω & K·∫ø ho·∫°ch Du l·ªãch Nha Trang")

    # Hi·ªÉn th·ªã popup c·∫£nh b√°o
    show_popup_notice()

    # Sidebar
    st.sidebar.header("üîç B·ªô l·ªçc & M·ª•c tra c·ª©u")
    show_section = st.sidebar.multiselect(
        "Ch·ªçn ph·∫ßn mu·ªën xem:",
        ["Nh·∫≠t k√Ω", "Th√¥ng tin chung", "L·ªãch tr√¨nh", "Kh√°ch s·∫°n", "T√†u h·ªèa"],
        default=["Nh·∫≠t k√Ω"]
    )

    # G·ªçi c√°c h√†m theo l·ª±a ch·ªçn
    if "Nh·∫≠t k√Ω" in show_section:
        show_diary()
    if "Th√¥ng tin chung" in show_section:
        show_meta()
    if "L·ªãch tr√¨nh" in show_section:
        show_itinerary()
    if "Kh√°ch s·∫°n" in show_section:
        show_hotels()
    if "T√†u h·ªèa" in show_section:
        show_trains()

# ============================
# CH·∫†Y APP
# ============================
if __name__ == "__main__":
    main()
